/*****************************************************************************
 *
 *  PROJECT:     Multi Theft Auto v1.0
 *  LICENSE:     See LICENSE in the top level directory
 *  FILE:        mods/deathmatch/logic/CVehicleManager.cpp
 *  PURPOSE:     Vehicle entity manager class
 *
 *  Multi Theft Auto is available from http://www.multitheftauto.com/
 *
 *****************************************************************************/

#include "StdInc.h"
#include "CVehicleManager.h"
#include "Utils.h"
#include "lua/LuaCommon.h"

static const SFixedArray<uchar, 327> g_ucMaxPassengers = {{
    3, 3, 3, 1, 3, 3, 0, 1, 1, 3, 1, 3, 3, 3, 1, 1,              // 400->415
    3, 1, 3, 3, 3, 3, 3, 1, 1, 0, 3, 3, 3, 1, 0, 8,              // 416->431
    0, 1, 1, 255, 3, 8, 3, 3, 3, 0, 1, 1, 1, 3, 0, 1,            // 432->447
    0, 1, 255, 1, 0, 0, 0, 1, 1, 1, 3, 3, 1, 1, 1,               // 448->462
    1, 1, 1, 3, 3, 1, 1, 3, 1, 0, 0, 3, 3, 0, 1, 3,              // 463->478
    3, 3, 0, 3, 1, 0, 0, 0, 3, 1, 1, 3, 3, 3, 0, 1,              // 479->494
    3, 1, 3, 3, 1, 3, 1, 3, 3, 1, 1, 3, 3, 1, 0, 0,              // 495->510
    1, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 1, 1, 1, 1, 3,              // 511->526
    1, 1, 3, 0, 0, 0, 3, 1, 1, 3, 1, 1, 0, 3, 1,                 // 527->541
    3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 0, 3, 3, 1, 1,              // 542->557
    1, 1, 3, 3, 1, 1, 0, 3, 3, 3, 3, 255, 1, 0, 0,               // 558->572
    1, 0, 3, 3, 1, 1, 3, 3, 1, 3, 0, 255, 3, 1, 3, 1,            // 573->588
    3, 255, 255, 1, 1, 1, 0, 3, 3, 3, 3, 3, 1, 3, 1,             // 589->604
    3, 1, 255, 255, 255, 3, 255, 255,
    // NEW
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,            // 18593 - 18603
    0, 0, 0, 0, 0, 0, 0, 0,                     // unused
    3, 3, 1, 1, 1, 3, 1, 3, 1, 3,               // 18613 - 18622
    3, 3, 1, 3, 3, 3, 1, 1, 3, 3,               // 18623 - 18632
    1, 3, 1, 3, 3, 1, 1, 1, 3, 3,               // 18633 - 18642
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3,               // 18643 - 18652
    3, 3, 3, 3, 3, 3, 3,                        // to 18658

    3, 3, 1, 3, 3, 3,              // 18659 - 16865
    3, 1, 1, 3, 3,                 // 18666 - 18670
    1, 1, 0, 0, 3,                 // 18671 - 18675
    1, 1, 1, 1, 3,                 // 18676 - 18680
    3, 3, 1, 1, 1,                 // 18681 - 18685
    1, 1, 1, 1, 1,                 // 18686 - 18690
    1, 1, 1, 1, 3,                 // 18691 - 18695
    3, 1, 3, 3, 3,                 // 18696 - 18700
    1, 3, 1, 1, 1, 3, 1            // 18701 - 18707

}};            // 605->611

// List over all vehicles with their special attributes
#define VEHICLE_HAS_TURRENT             0x001UL //1
#define VEHICLE_HAS_SIRENS              0x002UL //2
#define VEHICLE_HAS_LANDING_GEARS       0x004UL //4
#define VEHICLE_HAS_ADJUSTABLE_PROPERTY 0x008UL //8
#define VEHICLE_HAS_SMOKE_TRAIL         0x010UL //16
#define VEHICLE_HAS_TAXI_LIGHTS         0x020UL //32
#define VEHICLE_HAS_SEARCH_LIGHT        0x040UL //64

// Generated by MTA10\utils\gentable\gentable_vehattr.cpp
static const SFixedArray<uchar, 327> g_ulVehicleAttributes = {
    {0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0,  0,  0, 0, 2, 0,  0, 0, 32, 0, 0,  2, 0,            // 400-424
     0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  32, 0, 0, 0, 0,  8, 0, 0,  0, 0,  0, 0,            // 425-449
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0,  0, 0,            // 450-474
     0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,  0,  0, 2, 0, 0,  0, 0, 0,  0, 64, 0, 0,            // 475-499
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 0,  0, 4, 12, 0, 0,  2, 8,            // 500-524
     8, 0, 0, 2, 0, 8, 8, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0,  0, 2, 0,  0, 0,  0, 0,            // 525-549
     0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0,  0, 0,            // 550-574
     0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 12, 0, 0, 0,  2, 2,  2, 2,            // 575-599
     0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,            // 18593 - 18603
     0, 0, 0, 0, 0, 0, 0, 0, 0,                  // unused
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               // 18613 - 18622
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               // 18623 - 18632
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               // 18633 - 18642
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               // 18643 - 18652
     0, 0, 0, 0, 0, 0,                           // 18658
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0,  0, 0, 0,  0}};

static const SFixedArray<eVehicleType, 212> gs_vehicleTypes = {
    {VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_MONSTERTRUCK, VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_HELI,  VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_HELI,  VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_BOAT,         VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_TRAILER, VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_MONSTERTRUCK, VEHICLE_CAR,          VEHICLE_BOAT,         VEHICLE_HELI,
     VEHICLE_BIKE,    VEHICLE_TRAIN, VEHICLE_TRAILER, VEHICLE_CAR,     VEHICLE_BOAT,         VEHICLE_BOAT,         VEHICLE_BOAT,         VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_PLANE,        VEHICLE_BIKE,         VEHICLE_BIKE,         VEHICLE_BIKE,
     VEHICLE_PLANE,   VEHICLE_HELI,  VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_BIKE,         VEHICLE_HELI,         VEHICLE_CAR,          VEHICLE_QUADBIKE,
     VEHICLE_BOAT,    VEHICLE_BOAT,  VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_PLANE,        VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_BMX,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_BOAT,         VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_HELI,
     VEHICLE_HELI,    VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_BOAT,         VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_HELI,  VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_HELI,         VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_BMX,          VEHICLE_BMX,          VEHICLE_PLANE,
     VEHICLE_PLANE,   VEHICLE_PLANE, VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_PLANE,
     VEHICLE_PLANE,   VEHICLE_BIKE,  VEHICLE_BIKE,    VEHICLE_BIKE,    VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_TRAIN, VEHICLE_TRAIN,   VEHICLE_PLANE,   VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_HELI,         VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_PLANE, VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_MONSTERTRUCK, VEHICLE_MONSTERTRUCK, VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_HELI,    VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_TRAIN, VEHICLE_TRAIN,   VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_MONSTERTRUCK, VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_PLANE, VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_BIKE,         VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_TRAILER, VEHICLE_CAR,   VEHICLE_BIKE,    VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_TRAIN,        VEHICLE_TRAILER,
     VEHICLE_PLANE,   VEHICLE_PLANE, VEHICLE_CAR,     VEHICLE_BOAT,    VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_CAR,
     VEHICLE_CAR,     VEHICLE_CAR,   VEHICLE_CAR,     VEHICLE_CAR,     VEHICLE_CAR,          VEHICLE_CAR,          VEHICLE_TRAILER,      VEHICLE_TRAILER,
     VEHICLE_TRAILER, VEHICLE_CAR,   VEHICLE_TRAILER, VEHICLE_TRAILER}};

static SFixedArray<uchar, 212> g_ucVariants;

CVehicleManager::CVehicleManager()
{
    int iVehicleID = 0;
    for (int i = 0; i < 212; i++)
    {
        g_ucVariants[i] = 255;
        iVehicleID = i + 400;
        switch (iVehicleID)
        {
            case 416:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 435:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 450:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 607:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 485:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 433:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 499:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 581:
            {
                g_ucVariants[i] = 4;
                break;
            }
            case 424:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 504:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 422:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 482:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 457:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 483:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 415:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 437:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 472:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 521:
            {
                g_ucVariants[i] = 4;
                break;
            }
            case 407:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 455:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 434:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 502:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 503:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 571:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 595:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 484:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 500:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 556:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 557:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 423:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 414:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 522:
            {
                g_ucVariants[i] = 4;
                break;
            }
            case 470:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 404:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 600:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 413:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 453:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 442:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 440:
            {
                g_ucVariants[i] = 5;
                break;
            }
            case 543:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 605:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 428:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 535:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 439:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 506:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 601:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 459:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 449:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 408:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 583:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 552:
            {
                g_ucVariants[i] = 1;
                break;
            }
            case 478:
            {
                g_ucVariants[i] = 2;
                break;
            }
            case 555:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 456:
            {
                g_ucVariants[i] = 3;
                break;
            }
            case 477:
            {
                g_ucVariants[i] = 0;
                break;
            }
            case 6702:
            {
                g_ucVariants[i] = 4;
                break;
            }
        }
    }
}

CVehicleManager::~CVehicleManager()
{
    DeleteAll();
}

CVehicle* CVehicleManager::Create(CElement* pParent, unsigned short usModel, unsigned char ucVariant, unsigned char ucVariant2)
{
    CVehicle* const pVehicle = new CVehicle(this, pParent, usModel, ucVariant, ucVariant2);

    if (pVehicle->GetID() == INVALID_ELEMENT_ID)
    {
        delete pVehicle;
        return nullptr;
    }

    return pVehicle;
}

CVehicle* CVehicleManager::CreateFromXML(CElement* pParent, CXMLNode& Node, CEvents* pEvents)
{
    RandomizeRandomSeed();
    CVehicle* pVehicle = new CVehicle(this, pParent, 400, 254, 254);

    if (pVehicle->GetID() == INVALID_ELEMENT_ID || !pVehicle->LoadFromCustomData(pEvents, Node))
    {
        delete pVehicle;
        return nullptr;
    }

    return pVehicle;
}

void CVehicleManager::DeleteAll()
{
    // Delete all items
    DeletePointersAndClearList(m_List);
}

void CVehicleManager::RemoveFromList(CVehicle* pVehicle)
{
    m_List.remove(pVehicle);
}

bool CVehicleManager::Exists(CVehicle* pVehicle)
{
    return ListContains(m_List, pVehicle);
}

bool CVehicleManager::IsValidModel(unsigned int ulVehicleModel)
{
    if (ulVehicleModel >= 400 && ulVehicleModel <= 611)
    {
        return true;
    }
    if (ulVehicleModel >= 6283 && ulVehicleModel <= 6525)
    {
        return true;
    }
    if (ulVehicleModel >= 6526 && ulVehicleModel <= 6704)
    {
        return true;
    }
    if (ulVehicleModel >= 17306 && ulVehicleModel <= 17628)
    {
        return true;
    }
    return false;
}

eVehicleType CVehicleManager::GetVehicleType(unsigned short usModel)
{
    if (!IsValidModel(usModel))
        return VEHICLE_NONE;

    if (usModel == 6702)
        return VEHICLE_BIKE;

    if (usModel > 611)
        return VEHICLE_CAR;

    return gs_vehicleTypes[usModel - 400];
}

bool CVehicleManager::IsValidUpgrade(unsigned short usUpgrade)
{
    return (usUpgrade >= 1000 && usUpgrade <= 1193);
}

unsigned int CVehicleManager::GetMaxPassengers(unsigned int uiVehicleModel)
{
    if (IsValidModel(uiVehicleModel))
    {
        if (uiVehicleModel >= 400 && uiVehicleModel <= 611)
        {
            return g_ucMaxPassengers[uiVehicleModel - 400];
        }

        if (uiVehicleModel > 611)
        {
            return 3;
            return g_ucMaxPassengers[uiVehicleModel - 6283];
        }
    }

    return 0xFF;
}

void CVehicleManager::GetRandomVariation(unsigned short usModel, unsigned char& ucVariant, unsigned char& ucVariant2)
{
    RandomizeRandomSeed();
    ucVariant = 255;
    ucVariant2 = 255;
    if (usModel > 611)
    {
        return;
    }
    // Valid model?
    if (IsValidModel(usModel) && g_ucVariants[usModel - 400] != 255)
    {
        // caddy || cropduster
        if (usModel == 457 || usModel == 512)
        {
            // 255, 0, 1, 2
            ucVariant = (rand() % 4) - 1;

            // 3, 4, 5
            ucVariant2 = (rand() % 3);
            ucVariant2 += 3;
            return;
        }
        // Slamvan
        else if (usModel == 535)
        {
            // Slamvan has steering wheel "extras" we want one of those so default cannot be an option.
            ucVariant = (rand() % (g_ucVariants[usModel - 400] + 1));
            return;
        }
        // NRG 500 || BF400
        else if (usModel == 522 || usModel == 581)
        {
            // e.g. 581 ( BF400 )
            // first 3 properties are Exhaust
            // last 2 are fairings.

            // 255, 0, 1, 2
            ucVariant = (rand() % 4) - 1;

            // 3, 4
            ucVariant2 = (rand() % 2);
            ucVariant2 += 3;
            return;
        }
        // e.g. ( rand () % ( 5 + 2 ) ) - 1
        // Can generate 6 then minus 1 = 5
        // Can generate 0 then minus 1 = -1 (255) (default model with nothing)
        ucVariant = (rand() % (g_ucVariants[usModel - 400] + 2)) - 1;
    }
}

bool CVehicleManager::HasTurret(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_TURRENT));
}

bool CVehicleManager::HasSirens(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_SIRENS));
}

bool CVehicleManager::HasTaxiLight(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_TAXI_LIGHTS));
}

bool CVehicleManager::HasLandingGears(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_LANDING_GEARS));
}

bool CVehicleManager::HasAdjustableProperty(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_ADJUSTABLE_PROPERTY));
}

bool CVehicleManager::HasSmokeTrail(unsigned int uiModel)
{
    if (uiModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiModel) && (g_ulVehicleAttributes[uiModel - 400] & VEHICLE_HAS_SMOKE_TRAIL));
}

bool CVehicleManager::IsTrailer(unsigned int uiVehicleModel)
{
    if (uiVehicleModel > 611)
    {
        return false;
    }
    return (IsValidModel(uiVehicleModel) && (gs_vehicleTypes[uiVehicleModel - 400] == VEHICLE_TRAILER));
}

bool CVehicleManager::HasDamageModel(unsigned short usModel)
{
    if (usModel > 611)
    {
        return false;
    }
    return HasDamageModel(GetVehicleType(usModel));
}

bool CVehicleManager::HasDamageModel(eVehicleType Type)
{
    switch (Type)
    {
        case VEHICLE_TRAILER:
        case VEHICLE_MONSTERTRUCK:
        case VEHICLE_QUADBIKE:
        case VEHICLE_HELI:
        case VEHICLE_PLANE:
        case VEHICLE_CAR:
            return true;
        default:
            return false;
    }
}

bool CVehicleManager::HasDoors(unsigned short usModel)
{
    bool bHasDoors = false;

    if (HasDamageModel((usModel >= 400 && usModel <= 611) || (usModel > 611)) == true)
    {
        switch ((usModel >= 400 && usModel <= 611) || (usModel > 611))
        {
            case VT_BFINJECT:
            case VT_RCBANDIT:
            case VT_CADDY:
            case VT_RCRAIDER:
            case VT_BAGGAGE:
            case VT_DOZER:
            case VT_FORKLIFT:
            case VT_TRACTOR:
            case VT_RCTIGER:
            case VT_BANDITO:
            case VT_KART:
            case VT_MOWER:
            case VT_RCCAM:
            case VT_RCGOBLIN:
            case VT_SF15:
                break;
            default:
                bHasDoors = true;
        }
    }

    return bHasDoors;
}

CVehicleColor CVehicleManager::GetRandomColor(unsigned short usModel)
{
    return m_ColorManager.GetRandomColor(usModel);
}

void CVehicleManager::GetVehiclesOfType(unsigned int uiModel, lua_State* luaVM)
{
    assert(luaVM);

    // Add all the matching vehicles to the table
    unsigned int                   uiIndex = 0;
    std::list<CVehicle*>::iterator iter = m_List.begin();
    for (; iter != m_List.end(); ++iter)
    {
        if ((*iter)->GetModel() == uiModel)
        {
            // Add it to the table
            lua_pushnumber(luaVM, ++uiIndex);
            lua_pushelement(luaVM, *iter);
            lua_settable(luaVM, -3);
        }
    }
}
